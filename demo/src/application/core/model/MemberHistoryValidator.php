<?php
/**
 * @buief
 * @details MemberHistoryValidator.
 *
 * Generated By DaoGenerator.
 * 
 * TODO:※スケルトンです。適切に修正してください。
 *
 * @since 2015/02/13
 * @package Onota0318
 */
namespace Core\Model;
 
use Onota0318\Zend2Adapter\Model\AbstractValidator;

class MemberHistoryValidator extends AbstractValidator
{
    /**
     * validate for id 
     * 
     * @param mixed $input target value.
     * @param array $messages message list.
     * @return void
     */
    public function validateId($input, array $messages = array())
    {
        $logical  = "ID";
        $field    = "id";
        $nullable = false;

        $validator = array(
            "name"       => $field,
            "required"   => true,
            "validators" => array(
                $this->getNotEmptySignature($messages),
                $this->getDigitsSignature($messages),
            ),
        );

        $this->verify($field, $input, $validator, $nullable, array($logical));
    }

    /**
     * validate for member_id 
     * 
     * @param mixed $input target value.
     * @param array $messages message list.
     * @return void
     */
    public function validateMemberId($input, array $messages = array())
    {
        $logical  = "会員ID";
        $field    = "member_id";
        $nullable = false;

        $validator = array(
            "name"       => $field,
            "required"   => true,
            "validators" => array(
                $this->getNotEmptySignature($messages),
                $this->getDigitsSignature($messages),
            ),
        );

        $this->verify($field, $input, $validator, $nullable, array($logical));
    }

    /**
     * validate for key 
     * 
     * @param mixed $input target value.
     * @param array $messages message list.
     * @return void
     */
    public function validateKey($input, array $messages = array())
    {
        $logical  = "変更属性";
        $field     = "key";
        $nullable  = false;
        $minLength = 0;
        $maxLength = 255;

        $validator = array(
            "name"       => $field,
            "required"   => true,
            "validators" => array(
                $this->getNotEmptySignature($messages),
                $this->getStringLengthSignature($minLength, $maxLength, $messages),
                $this->getUnsupportedStringSignature($messages),
            ),
        );

        $this->verify($field, $input, $validator, $nullable, array($logical, $minLength, $maxLength));
    }

    /**
     * validate for before_value 
     * 
     * @param mixed $input target value.
     * @param array $messages message list.
     * @return void
     */
    public function validateBeforeValue($input, array $messages = array())
    {
        $logical  = "変更前値";
        $field     = "before_value";
        $nullable  = false;
        $minLength = 0;
        $maxLength = 255;

        $validator = array(
            "name"       => $field,
            "required"   => true,
            "validators" => array(
                $this->getNotEmptySignature($messages),
                $this->getStringLengthSignature($minLength, $maxLength, $messages),
                $this->getUnsupportedStringSignature($messages),
            ),
        );

        $this->verify($field, $input, $validator, $nullable, array($logical, $minLength, $maxLength));
    }

    /**
     * validate for after_value 
     * 
     * @param mixed $input target value.
     * @param array $messages message list.
     * @return void
     */
    public function validateAfterValue($input, array $messages = array())
    {
        $logical  = "変更後値";
        $field     = "after_value";
        $nullable  = false;
        $minLength = 0;
        $maxLength = 255;

        $validator = array(
            "name"       => $field,
            "required"   => true,
            "validators" => array(
                $this->getNotEmptySignature($messages),
                $this->getStringLengthSignature($minLength, $maxLength, $messages),
                $this->getUnsupportedStringSignature($messages),
            ),
        );

        $this->verify($field, $input, $validator, $nullable, array($logical, $minLength, $maxLength));
    }

    /**
     * validate for created_date 
     * 
     * @param mixed $input target value.
     * @param array $messages message list.
     * @return void
     */
    public function validateCreatedDate($input, array $messages = array())
    {
    }

    /**
     * validate for modified_date 
     * 
     * @param mixed $input target value.
     * @param array $messages message list.
     * @return void
     */
    public function validateModifiedDate($input, array $messages = array())
    {
    }

    /**
     * validate for deleted_date 
     * 
     * @param mixed $input target value.
     * @param array $messages message list.
     * @return void
     */
    public function validateDeletedDate($input, array $messages = array())
    {
    }

}